// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// AAt
Eigen::MatrixXd AAt(const Eigen::MatrixXd& A);
RcppExport SEXP _expectreg_AAt(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(AAt(A));
    return rcpp_result_gen;
END_RCPP
}
// AtA
Eigen::MatrixXd AtA(const Eigen::MatrixXd& A);
RcppExport SEXP _expectreg_AtA(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(AtA(A));
    return rcpp_result_gen;
END_RCPP
}
// lltLS
List lltLS(const Eigen::Map<Eigen::VectorXd>& y, const Eigen::MatrixXd& B, const double& tau, const Eigen::Map<Eigen::VectorXd>& lambdashort_glatt, const Eigen::Map<Eigen::VectorXd>& lambdashort_orig, Eigen::MatrixXd DD, const Eigen::Map<Eigen::VectorXi>& NB, const Eigen::Map<Eigen::VectorXi>& glatterms);
RcppExport SEXP _expectreg_lltLS(SEXP ySEXP, SEXP BSEXP, SEXP tauSEXP, SEXP lambdashort_glattSEXP, SEXP lambdashort_origSEXP, SEXP DDSEXP, SEXP NBSEXP, SEXP glattermsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type lambdashort_glatt(lambdashort_glattSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type lambdashort_orig(lambdashort_origSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type DD(DDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type NB(NBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type glatterms(glattermsSEXP);
    rcpp_result_gen = Rcpp::wrap(lltLS(y, B, tau, lambdashort_glatt, lambdashort_orig, DD, NB, glatterms));
    return rcpp_result_gen;
END_RCPP
}
// smoothCPPP
double smoothCPPP(const Eigen::Map<Eigen::VectorXd>& y, const Eigen::MatrixXd& B, const double& tau, const Eigen::Map<Eigen::VectorXd>& lambdashort_glatt, const Eigen::Map<Eigen::VectorXd>& lambdashort_orig, Eigen::MatrixXd DD, const Eigen::Map<Eigen::VectorXi>& NB, const Eigen::Map<Eigen::VectorXi>& glatterms, std::string smoothtype);
RcppExport SEXP _expectreg_smoothCPPP(SEXP ySEXP, SEXP BSEXP, SEXP tauSEXP, SEXP lambdashort_glattSEXP, SEXP lambdashort_origSEXP, SEXP DDSEXP, SEXP NBSEXP, SEXP glattermsSEXP, SEXP smoothtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type lambdashort_glatt(lambdashort_glattSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type lambdashort_orig(lambdashort_origSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type DD(DDSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type NB(NBSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type glatterms(glattermsSEXP);
    Rcpp::traits::input_parameter< std::string >::type smoothtype(smoothtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(smoothCPPP(y, B, tau, lambdashort_glatt, lambdashort_orig, DD, NB, glatterms, smoothtype));
    return rcpp_result_gen;
END_RCPP
}


static const R_CallMethodDef CallEntries[] = {
    {"_expectreg_AAt", (DL_FUNC) &_expectreg_AAt, 1},
    {"_expectreg_AtA", (DL_FUNC) &_expectreg_AtA, 1},
    {"_expectreg_lltLS", (DL_FUNC) &_expectreg_lltLS, 8},
    {"_expectreg_smoothCPPP", (DL_FUNC) &_expectreg_smoothCPPP, 9},
   // {"_expectreg_schallCPPfun", (DL_FUNC) &_expectreg_schallCPPfun, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_expectreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
